{"version":3,"sources":["components/TodoList/TodoList.tsx","components/api/todos.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","selectValue","inputHandler","event","setState","target","value","filterTodos","filterBySelect","filter","todo","lowerQuery","toLowerCase","title","includes","changeSelectedValue","props","todos","completed","filteredTodos","this","className","type","placeholder","onChange","map","classnames","TodoList__item","htmlFor","id","readOnly","checked","selectedId","userId","onClick","setUserId","React","Component","API_URL","getData","url","a","fetch","response","json","getUser","CurrentUser","selectedUser","loadUser","user","prevProps","name","email","phone","clear","App","selectedUserId","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ce57288.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  setUserId: (userId: number) => void\n  selectedId: number,\n};\n\ntype State = {\n  query: string,\n  selectValue: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    query: '',\n    selectValue: '',\n  };\n\n  inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n\n  filterTodos = () => {\n    return this.filterBySelect()\n      .filter(todo => {\n        const lowerQuery = this.state.query.toLowerCase();\n        const lowerTitle = todo.title.toLowerCase();\n\n        return lowerTitle.includes(lowerQuery);\n      });\n  };\n\n  changeSelectedValue = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectValue: event.target.value,\n    });\n  };\n\n  filterBySelect = () => {\n    switch (this.state.selectValue) {\n      case 'Active':\n        return this.props.todos.filter(todo => todo.completed === false);\n\n      case 'Completed':\n        return this.props.todos.filter(todo => todo.completed === true);\n\n      default:\n        return this.props.todos;\n    }\n  };\n\n  render() {\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-filters\">\n          <input\n            type=\"text\"\n            className=\"TodoList__title-input\"\n            placeholder=\"Title\"\n            value={this.state.query}\n            onChange={this.inputHandler}\n          />\n          <select\n            value={this.state.selectValue}\n            onChange={this.changeSelectedValue}\n            className=\"TodoList__select\"\n          >\n            <option value=\"\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames({\n                  TodoList__item: true,\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label htmlFor={`Todo-${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`Todo-${todo.id}`}\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classnames({\n                    'TodoList__user-button button': true,\n                    'TodoList__user-button--selected': this.props.selectedId === todo.userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => this.props.setUserId(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(`${API_URL}${url}`);\n\n  return response.json();\n}\n\nexport function getTodos() {\n  return getData<Todo[]>('/todos');\n}\n\nexport function getUser(id: number) {\n  return getData<User>(`/users/${id}`);\n}\n","import React from 'react';\nimport { getUser } from '../api/todos';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  clear: () => void,\n};\n\ntype State = {\n  selectedUser: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    selectedUser: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    const user = await getUser(this.props.userId);\n\n    this.setState({\n      selectedUser: user,\n    });\n  };\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {selectedUser && (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${this.props.userId}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n            <button\n              type=\"button\"\n              className=\"CurrentUser__clear\"\n              onClick={this.props.clear}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/todos';\n\ntype State = {\n  selectedUserId: number;\n  todos: Todo[];\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  setSelectedUserId = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clear = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            setUserId={this.setSelectedUserId}\n            selectedId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                clear={this.clear}\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}